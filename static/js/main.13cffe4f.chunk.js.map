{"version":3,"sources":["components/AddMovie.module.css","components/Movie.module.css","components/MoviesList.module.css","components/Movie.js","components/MoviesList.js","components/AddMovie.js","containers/App.js","index.js"],"names":["module","exports","Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","id","AddMovie","titleRef","useRef","openingTextRef","releaseDateRef","onSubmit","event","preventDefault","current","value","onAddMovie","control","htmlFor","type","ref","rows","App","useState","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","useCallback","a","fetch","response","ok","Error","json","key","data","loadedMovies","push","message","method","body","JSON","stringify","headers","console","log","useEffect","content","length","MoviesList","Fragment","onClick","ReactDOM","render","document","getElementById"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,QAAU,4B,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC,+KCYjBC,EAVD,SAACC,GACb,OACE,qBAAIC,UAAWC,IAAQC,MAAvB,UACE,6BAAKH,EAAMI,QACX,6BAAKJ,EAAMK,cACX,4BAAIL,EAAMM,kB,gBCYDC,EAfG,SAACP,GACjB,OACE,oBAAIC,UAAWC,IAAQ,eAAvB,SACGF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,cAAC,EAAD,CAEEC,MAAOD,EAAMC,MACbC,YAAaF,EAAME,YACnBC,YAAaH,EAAMG,aAHdH,EAAMO,U,gBCgCNC,MAtCf,SAAkBX,GAChB,IAAMY,EAAWC,iBAAO,IAClBC,EAAiBD,iBAAO,IACxBE,EAAiBF,iBAAO,IAgB9B,OACE,uBAAMG,SAfR,SAAuBC,GACrBA,EAAMC,iBAIN,IAAMf,EAAQ,CACZC,MAAOQ,EAASO,QAAQC,MACxBd,YAAaQ,EAAeK,QAAQC,MACpCf,YAAaU,EAAeI,QAAQC,OAGtCpB,EAAMqB,WAAWlB,IAIjB,UACE,sBAAKF,UAAWC,IAAQoB,QAAxB,UACE,uBAAOC,QAAQ,QAAf,mBACA,uBAAOC,KAAK,OAAOd,GAAG,QAAQe,IAAKb,OAErC,sBAAKX,UAAWC,IAAQoB,QAAxB,UACE,uBAAOC,QAAQ,eAAf,0BACA,0BAAUG,KAAK,IAAIhB,GAAG,eAAee,IAAKX,OAE5C,sBAAKb,UAAWC,IAAQoB,QAAxB,UACE,uBAAOC,QAAQ,OAAf,0BACA,uBAAOC,KAAK,OAAOd,GAAG,OAAOe,IAAKV,OAEpC,mD,MCmDSY,MAnFf,WACA,MAA4BC,mBAAS,IAArC,mBAAOpB,EAAP,KAAeqB,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAIMC,EAAsBC,sBAAW,sBAAC,kCAAAC,EAAA,6DACnCL,GAAa,GACbE,EAAS,MAF0B,kBAIVI,MAAM,4EAJI,WAI3BC,EAJ2B,QAMpBC,GANoB,sBAOzB,IAAIC,MAAM,yBAPe,wBAUbF,EAASG,OAVI,QAchC,IAAUC,KAJJC,EAV0B,OAY1BC,EAAe,GAEJD,EACfC,EAAaC,KAAK,CAChBnC,GAAIgC,EACJtC,MAAOuC,EAAKD,GAAKtC,MACjBE,YAAaqC,EAAKD,GAAKpC,YACvBD,YAAasC,EAAKD,GAAKrC,cAK7BwB,EAAUe,GACVb,GAAa,GAzBqB,kDA2BlCE,EAAS,KAAMa,SACff,GAAa,GA5BqB,0DA8BnC,IArCU,4CA4Cb,WAA+B5B,GAA/B,iBAAAiC,EAAA,sEAC2BC,MAAM,2EAA4E,CACzGU,OAAQ,OACRC,KAAMC,KAAKC,UAAU/C,GACrBgD,QAAS,CACP,eAAgB,sBALtB,cACUb,EADV,gBAQqBA,EAASG,OAR9B,OAQQE,EARR,OASES,QAAQC,IAAIV,GATd,4CA5Ca,sBAuCbW,qBAAU,WACRpB,MACC,CAACA,IAeJ,IAAIqB,EAAU,iDAed,OAbI/C,EAAOgD,OAAS,IAClBD,EAAU,cAACE,EAAD,CAAYjD,OAAQA,KAG5BwB,IACFuB,EAAU,4BAAIvB,KAGZF,IACFyB,EAAU,4CAKV,eAAC,IAAMG,SAAP,WACE,kCACE,cAAC,EAAD,CAAUrC,WA1EH,gDA4ET,kCACE,wBAAQsC,QAASzB,EAAjB,4BAEF,kCAAUqB,QC/EhBK,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.13cffe4f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"AddMovie_control__2ENNX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__27rBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__lMnXQ\"};","import React from 'react';\nimport classes from './Movie.module.css';\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\n\nimport Movie from './Movie';\nimport classes from './MoviesList.module.css';\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes['movies-list']}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.releaseDate}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useRef } from 'react';\n\nimport classes from './AddMovie.module.css';\n\nfunction AddMovie(props) {\n  const titleRef = useRef('');\n  const openingTextRef = useRef('');\n  const releaseDateRef = useRef('');\n\n  function submitHandler(event) {\n    event.preventDefault();\n\n    // could add validation here...\n\n    const movie = {\n      title: titleRef.current.value,\n      openingText: openingTextRef.current.value,\n      releaseDate: releaseDateRef.current.value,\n    };\n\n    props.onAddMovie(movie);\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className={classes.control}>\n        <label htmlFor='title'>Title</label>\n        <input type='text' id='title' ref={titleRef} />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='opening-text'>Opening Text</label>\n        <textarea rows='5' id='opening-text' ref={openingTextRef}></textarea>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='date'>Release Date</label>\n        <input type='text' id='date' ref={releaseDateRef} />\n      </div>\n      <button>Add Movie</button>\n    </form>\n  );\n}\n\nexport default AddMovie;\n","import React, {useState, useEffect, useCallback} from 'react';\nimport MoviesList from '../components/MoviesList';\nimport AddMovie from '../components/AddMovie';\nimport './App.css';\n\nfunction App() {\nconst [movies, setMovies] = useState([])\nconst [isLoading, setIsLoading] = useState(false)\nconst [error, setError] = useState(null)\n   \n\n\nconst fetchMoviesHandler =  useCallback(async()=>{\n     setIsLoading(true)\n     setError(null)\n     try{\n       const response = await fetch(\"https://react-fetch-movies-1fd98-default-rtdb.firebaseio.com/movies.json\")\n       \n       if(!response.ok){\n         throw new Error(\"Something went wrong!\")\n        }\n        \n        const data = await response.json()\n\n        const loadedMovies = [];\n\n        for(const key in data) {\n          loadedMovies.push({\n            id: key,\n            title: data[key].title,\n            openingText: data[key].openingText,\n            releaseDate: data[key].releaseDate\n          })\n        }\n      \n      \n      setMovies(loadedMovies)\n      setIsLoading(false)\n    } catch(error) {\n      setError(error.message)\n      setIsLoading(false)\n    }\n  }, [])\n\n  useEffect(()=>{\n    fetchMoviesHandler()\n  }, [fetchMoviesHandler])\n\n\n  async function addMovieHandler(movie) {\n      const response = await fetch(\"https://react-fetch-movies-1fd98-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      } \n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  \n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/containers/App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}